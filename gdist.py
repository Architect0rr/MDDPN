#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# First created by Egor Perevoshchikov at 2022-10-29 15:41.
# Last-update: 2023-01-07 16:21:52
#


from pathlib import Path
# import sys

import numpy as np
import adios2
import freud
import fastd as fd
import pandas as pd
import argparse
from datetime import datetime
import re
from os import listdir


def main(file: Path, nst: int, fs: Path):
    print("Main opening: ", str(file))
    adin = adios2.open(str(file), 'r')  # type: ignore
    N = int(adin.read('natoms'))
    Lx = adin.read('boxxhi')
    Ly = adin.read('boxyhi')
    Lz = adin.read('boxzhi')
    total_count = adin.steps()
    print("Total step count: ", total_count)
    if nst > total_count:
        adin.close()
        raise RuntimeError(
            "Needed step is bigger than total available step count")

    box = freud.box.Box.from_box(np.array([Lx, Ly, Lz]))

    print("Box volume is: ", box.volume)
    print("N atoms: ", N)

    for step in adin:
        if int(step.current_step()) != nst:
            continue
        else:
            arr = step.read('atoms')
            arr = arr[:, 2:5]
            sizes, dist = fd.proc(arr, N, box)
            pd.DataFrame(np.vstack([sizes, dist])).to_csv(
                fs, header=False, index=False)
            break
    adin.close()


def lstt(tdir: Path):
    onlyfiles = [f for f in listdir(tdir)]
    tf = [f for f in onlyfiles if re.match(r"^dump[0-9]?.bp$", f)]
    tf.sort()
    files = {}
    gs = 0
    for i, fn in enumerate(tf):
        adin = adios2.open(str(tdir / fn), 'r')  # type: ignore
        total_count = adin.steps()
        files[fn] = {}
        files[fn]["min"] = gs + 1
        gs += total_count
        files[fn]["max"] = gs
        adin.close()
    return files


if __name__ == "__main__":
    print("Started at ", datetime.now().strftime("%d.%m.%Y %H:%M:%S"))
    parser = argparse.ArgumentParser(
        description='Get cluster distribution from ADIOS2 db generated by LAMMPS.')
    parser.add_argument('--count', '-c', dest='fonly', action='store_true',
                        default=False,
                        help='Print number of ts in folder')
    parser.add_argument('folder', metavar='folder', type=str, nargs=1, required=True,
                        help='folder in which search for .bp files')
    parser.add_argument('steps', metavar='steps', type=int, nargs='+', required=True,
                        help='steps to get')
    args = parser.parse_args()
    tdir = Path(args.folder[0]).resolve()
    if not tdir.exists():
        raise FileNotFoundError("No such directory")
    print("Resolved path: ", tdir)
    pfiles = lstt(tdir)
    for fn, val in pfiles.items():
        print("File " + fn + ": " + str(val['min']) + " - " + str(val['max']))
    if args.fonly:
        print("Fonly handled")
        exit(0)
    for step in args.steps:
        for key, val in pfiles.items():
            if val['min'] < step and step < val['max']:
                main(tdir / key, step - val['min'],
                     tdir / ("step" + str(step) + ".csv"))
                break
    print("End. Exit...")
else:
    raise ImportError("Cannot be imported")

# possible can stumble world kiss manual label payment fee green omit traffic
